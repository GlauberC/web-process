mod MSET{X :: TRIV} is
  protecting EXT-BOOL .
  protecting NAT .
  sorts NeMset{X} Mset{X} .
  subsort X$Elt < NeMset{X} < Mset{X} .

  op empty : -> Mset{X} [ctor] .
  op _,_ : Mset{X} Mset{X} -> Mset{X} [ctor assoc comm id: empty prec 121 format (d r os d)] .
  op _,_ : NeMset{X} Mset{X} -> NeMset{X} [ctor ditto] .

  var E : X$Elt .
  var N : NeMset{X} .
  vars A S S' : Mset{X} .
  var C : Nat .

  --- eq N, N = N . IDEMPOTENCIA ELIMINADA

  op insert : X$Elt Mset{X} -> Mset{X} .
  eq insert(E, S) = E, S .

  op delete : X$Elt Mset{X} -> Mset{X} .
  eq delete(E, (E, S)) = delete(E, S) .
  eq delete(E, S) = S [owise] .

  op _in_ : X$Elt Mset{X} -> Bool .
  eq E in (E, S) = true .
  eq E in S = false [owise] .

  op |_| : Mset{X} -> Nat .
  op |_| : NeMset{X} -> NzNat .
  eq | S | = $card(S, 0) .

  op $card : Mset{X} Nat -> Nat .
  eq $card(empty, C) = C .
  eq $card((N, N, S), C) = $card((N, S), C) .
  eq $card((E, S), C) = $card(S, C + 1) [owise] .

  op union : Mset{X} Mset{X} -> Mset{X} .
  op union : NeMset{X} Mset{X} -> NeMset{X} .
  op union : Mset{X} NeMset{X} -> NeMset{X} .
  eq union(S, S') = S, S' .

  op intersection : Mset{X} Mset{X} -> Mset{X} .
  eq intersection(S, empty) = empty .
  eq intersection(S, N) = $intersect(S, N, empty) .

  op $intersect : Mset{X} Mset{X} Mset{X} -> Mset{X} .
  eq $intersect(empty, S', A) = A .
  eq $intersect((E, S), S', A) = $intersect(S, S', if E in S' then E, A else A fi) .

  op _\_ : Mset{X} Mset{X} -> Mset{X}  [gather (E e)].
  eq S \ empty = S .
  eq S \ N = $diff(S, N, empty) .

  op $diff : Mset{X} Mset{X} Mset{X} -> Mset{X} .
  eq $diff(empty, S', A) = A .
  eq $diff((E, S), S', A) = $diff(S, S', if E in S' then A else E, A fi) .

  op _subset_ : Mset{X} Mset{X} -> Bool .
  eq empty subset S' = true .
  eq (E, S) subset S' = E in S' and-then S subset S' .

  op _psubset_ : Mset{X} Mset{X} -> Bool .
  eq S psubset S' = S =/= S' and-then S subset S' .
endm
