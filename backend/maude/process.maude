load constraint.maude

mod PROCESS is
    protecting CONSTRAINTS-OPERATIONS .
    sorts Process AskProcess .
    subsort AskProcess < Process .

    op skip : -> Process .
    op _||_ : Process Process -> Process [ctor assoc prec 20] .
    op tell : Constraint -> Process .


    op ask_then_ : Constraint Process -> AskProcess [ctor prec 40] .
    op lask_then_ : Constraint Process -> AskProcess [ctor prec 40] .
    op _+_ : AskProcess AskProcess -> AskProcess [assoc id: zero] .
    op zero : -> AskProcess [ctor] .


endm

view Process from TRIV to PROCESS is
    sort Elt to Process .
endv

mod LIST-PROCESS is
    protecting LIST{Process} .
endm


mod DEFINITION is
    pr LIST-PROCESS .
    sort Def .

    op def : Qid Process -> Def [ctor] .
    op call : Qid -> Process [ctor] .

endm

view Def from TRIV to DEFINITION is
    sort Elt to Def .
endv

mod SET-DEFINITION is
    protecting SET{Def} .
endm




mod CONFIG is
    pr SET-DEFINITION .
    sort Config .

    op <_;_;_>  : Set{Def} List{Process} Set{Constraint} -> Config [ctor] .


    vars Lp, Lp' : List{Process} .
    var Pa : AskProcess .

    vars P P' P1 : Process .
    vars c c' d   : Constraint .
    var Lc : Set{Constraint} .
    var Ld : Set{Def} .
    var q : Qid .
    vars LA LA' : AskProcess .

    
    


    rl [tell] : < Ld ; Lp tell(c) Lp' ; Lc > => < Ld ; Lp Lp' ; (Lc, c) > .

    --- crl [askthen] : < Ld ;  Lp (ask c then P) Lp' ; Lc > => < Ld ; Lp P Lp'  ; Lc > if Lc |-- c .
    --- crl [laskthen] : < Ld ;  Lp (lask c then P) Lp' ; Lc > => < Ld ; Lp P Lp'  ; minus(Lc, c) > if Lc |-- c .

    crl [sum] : < Ld ; Lp (LA + (ask c then P) + LA') Lp' ; Lc > => < Ld ; Lp P Lp' ; Lc > if Lc |-- c .

    crl [lsum] : < Ld ; Lp, (LA + (lask c then P) + LA')  Lp' ; Lc > => < Ld ; Lp P Lp' ; minus(Lc, c) > if Lc |-- c .

    rl [call] : < ( def(q, P) , Ld) ; Lp call(q) Lp' ; Lc > => < ( def(q, P) , Ld)  ; Lp P Lp' ; Lc > .


    eq < Ld ; P || P1 ; Lc > = < Ld ;  P P1 ; Lc > .
    eq < Ld ; Lp (P || P1) ; Lc > = < Ld ; Lp P P1 ; Lc > .
    eq < Ld ; Lp (P || P1) Lp' ; Lc > = < Ld ; Lp P P1 Lp' ; Lc > .




endm

mod META-CONFIG is
    pr CONFIG .
    pr NAT .
    pr META-LEVEL * (op empty to emptyML , op _\_ to _\M\_ , op _,_ to _C_ , op insert to insert' , op delete to delete', op _in_ to _in'_, op |_| to ||_||, op $card to $card', op union to union' , op intersection to intersection' , op $intersect to $intersect', op $diff to $diff', op _subset_ to _subset'_ , op _psubset_ to _psubset'_ ) .

    op error : -> Config [ctor] .
    op metaRed : Config -> Config .
    op metaRew : Config Nat -> Config .
    op metaApp : Config Qid Substitution -> Config .

    var C : Config .
    var i : Nat .
    var S : Substitution .
    var rule : Qid .

    eq metaApp(C, rule, S) = downTerm(getTerm(metaApply(upModule('META-CONFIG, false), upTerm( C ), rule, S, 0)), error) .
    eq metaRed( C ) = downTerm(getTerm(metaReduce(upModule('META-CONFIG, false), upTerm( C ))), error) .
    eq metaRew( C, i ) = downTerm(getTerm(metaRewrite(upModule('META-CONFIG, false) , upTerm( C ), i)), error) .

    
    --- ==================================================
    --- Computing all possible instantiation of the rules.
    --- ==================================================

    --- Natural numbers + None
    sort OptNat .
    subsort Nat < OptNat .
    op None : -> OptNat [ctor] .
    -------
    vars n n' : Nat .
    vars on on' : OptNat .
    -------
    --- Next element (successor)
    op next : OptNat -> Nat .
    eq next(None) = 0 .
    eq next(n) = n + 1 .
    
    --- InfoRed: information about possible reduction.
    --- It includes:
    --- Nat Position in the list
    --- OptNat Index in the sumation (None for all the other constructs)
    --- Qid: Name of the rule
    --- Substitution: Identifiying the term to be reduced
 
    sort InfoRed .
    op ir : Nat OptNat Qid Substitution -> InfoRed .

    --- List of InfoRed
    sort LInfoRed .
    subsort InfoRed < LInfoRed .
    --- Empty list
    op nil : -> LInfoRed .
    --- Concatenation on lists of InfoRed
    op _;;_ : LInfoRed LInfoRed -> LInfoRed [ctor assoc  id: nil] .

    --- Some variables
    vars P P' Q Q' : Process .
    vars c c' d d'   : Constraint .
    var Lc : Set{Constraint} .
    var Ld : Set{Def} .
    var q : Qid .
    vars LA LA' : AskProcess .
    vars Lp Lp' : List{Process} .
    

    --- =============================================
    --- Computing the set of substitutions/reductions
    --- =============================================
    
    --- Given a configuration, it returns a list with possible substitution
    --- Version on configurations
    op getRedex : Config -> LInfoRed .
    eq getRedex(< Ld ; Lp ; Lc >) = getRedex(Lp, Lc, 0) .
    --- Version on List of processes
    op getRedex : List{Process} Set{Constraint} Nat -> LInfoRed .
    eq getRedex(nil, Lc, n) = nil .
    eq getRedex((P Lp), Lc, n) = getRedex$(P, Lp, Lc, n, None) ;; getRedex(Lp, Lc, n + 1) .
    --- Version on processes
    op getRedex$ : Process List{Process} Set{Constraint} Nat OptNat -> LInfoRed .
    --- Note that the substitutions includes the List of "remaining
    --- processes" (LA' in the rules )
    --- Case Tell
    eq getRedex$(tell(c), Lp, Lc, n, on) = ir(n, None, 'tell, ( 'c:Constraint <- upTerm(c) ; 'Lp':List`{Process`} <- upTerm(Lp) )) .
    --- Case Call
    eq getRedex$(call(q), Lp, Lc,n, on ) = ir(n, None, 'call, ( 'q:Qid <- upTerm(q) ; 'Lp':List`{Process`} <- upTerm(Lp) )) .
    --- Case Ask
    eq getRedex$(zero, Lp, Lc,n, on) = nil . --- Empty ask
    --- Several Asks
    eq getRedex$( ((ask c then P) + LA), Lp, Lc, n, on) =
	(if Lc |-- c then 
	    ir(n, next(on), 'sum, ( 'c:Constraint <- upTerm(c) ; 'P:Process <- upTerm(P) ; 'LA':AskProcess <- upTerm(LA) ;  'Lp':List`{Process`} <- upTerm(Lp) ) )
	  else nil fi )
	;; getRedex$( LA, Lp, Lc, n, next(on)) .
endm

eof

-------------- SOME TEST ----------------------
--- The function getRedex returns a list of InfoRed. T
red getRedex( < empty ; (ask 'c then tell('d)) + (ask 'c then tell('e)) ; 'c >) .

red getRedex( < empty ; ((ask 'c then tell('d)) + (ask 'd then tell('e))) || tell('x) ; 'c >) .
red metaApp(< empty ; ((ask 'c then tell('d)) + (ask 'd then tell('e))) || tell('x) ; 'c > , 'sum, ('LA':AskProcess <- 'ask_then_[''d.Sort C ('tell[''e.Sort])] ;  'Lp':List`{Process`} <- 'tell[''x.Sort] ;  'P:Process <- 'tell[''d.Sort] ;  'c:Constraint <- ''c.Sort)) .


red getRedex(< def( 'd1, tell('a) ) ; (ask 'a then (tell('xx) || tell('yy))) || call('d1) || tell( 'c ) || tell('d) || ( (ask 'a then tell('x)) + (ask 'a then tell('y)) + (ask 'aa then tell('z))) || (ask 'b then call('d1)); 'a >) .
red metaApp( < def( 'd1, tell('a) ) ; (ask 'a then (tell('xx) || tell('yy))) || call('d1) || tell( 'c ) || tell('d) || ( (ask 'a then tell('x)) + (ask 'a then tell('y)) + (ask 'aa then tell('z))) || (ask 'b then call('d1)); 'a >, 'sum, ('LA':AskProcess <- 'zero.AskProcess ; 
	'Lp':List`{Process`} <- '__[('call[''d1.Sort]) C ('tell[''c.Sort]) C ('tell[''d.Sort]) C ('_+_[('ask_then_[''a.Sort C ('tell[''x.Sort])]) C ('ask_then_[''a.Sort C ('tell[''y.Sort])]) C ('ask_then_[''aa.Sort C ('tell[''z.Sort])])]) C ('ask_then_[''b.Sort C ('call[''d1.Sort])])] ;  'P:Process <- '_||_[('tell[''xx.Sort]) C ('tell[''yy.Sort])] ; 'c:Constraint <- ''a.Sort)) .
-------------- SOME TEST ----------------------
    




    

*** metaApp
*** tell
red metaApp( < def( 'd1, tell('a) ) ; tell( 'c ) ; 'a >, 'tell, ( 'c:Constraint <- upTerm('c) ) ) .

*** askthen
red metaApp( < def( 'd1, tell('a) ) ; ask 'a then (tell('b)) ; 'a >, 'askthen, ( 'c:Constraint <- upTerm('a) ; 'P:Process <- upTerm(tell('b)) ) ) .
red metaApp( < def( 'd1, tell('a) ) ; ask 'a then (tell('b)) ; 'b >, 'askthen, ( 'c:Constraint <- upTerm('a) ; 'P:Process <- upTerm(tell('b)) ) ) . *** proposital error

*** laskthen
red metaApp( < def( 'd1, tell('a) ) ; lask 'a then (tell('b)) ; 'a >, 'laskthen, ( 'c:Constraint <- upTerm('a) ; 'P:Process <- upTerm(tell('b)) ) ) .
red metaApp( < def( 'd1, tell('a) ) ; lask 'b then (tell('b)) ; 'a >, 'laskthen, ( 'c:Constraint <- upTerm('b) ; 'P:Process <- upTerm(tell('b)) ) ) .

*** sum
red metaApp( < def( 'd1, tell('a) ) ;  ask 'c then tell('e) + ask 'd then tell('f) ; 'c >, 'sum, ( 'c:Constraint <- upTerm('c) ; 'P:Process <- upTerm(tell('e)) ) ) .
red metaApp( < def( 'd1, tell('a) ) ;  ask 'd then tell('e) + ask 'c then tell('f) ; 'c >, 'sum, ( 'c:Constraint <- upTerm('d) ; 'P:Process <- upTerm(tell('f)) ) ) .
red metaApp( < def( 'd1, tell('a) ) ;  ask 'd then tell('e) + ask 'a then tell('f) ; 'c >, 'sum, ( 'c:Constraint <- upTerm('d) ; 'P:Process <- upTerm(tell('e)) ) ) . *** proposital error

***lsum
red metaApp( < def( 'd1, tell('a) ) ;  lask 'c then tell('e) + lask 'd then tell('f) ; 'c >, 'lsum, ( 'c:Constraint <- upTerm('c) ; 'P:Process <- upTerm(tell('e)) ) ) .
red metaApp( < def( 'd1, tell('a) ) ;  lask 'd then tell('e) + lask 'c then tell('f) ; 'c >, 'lsum, ( 'c:Constraint <- upTerm('d) ; 'P:Process <- upTerm(tell('f)) ) ) .
red metaApp( < def( 'd1, tell('a) ) ;  lask 'd then tell('e) + lask 'a then tell('f) ; 'c >, 'lsum, ( 'c:Constraint <- upTerm('d) ; 'P:Process <- upTerm(tell('e)) ) ) . *** proposital error

*** call
red metaApp( < def( 'd1, tell('a) ) ; tell( 'c ) || call('d1) ; 'b >, 'call, ( 'q:Qid <- upTerm('d1) ) ) .
red metaApp( < ( def( 'd1, tell('a) ), def( 'd2, tell('f) ) ) ; tell( 'c ) || call('d2) ; 'b >, 'call, ( 'q:Qid <- upTerm('d2) ) ) .
red metaApp( < ( def( 'd1, tell('a) ), def( 'd2, tell('f) ) ) ; tell( 'c ) || call('d1) || call('d2) ; 'b >, 'call, ( 'q:Qid <- upTerm('d2) ) ) . 
red metaApp( < def( 'd1, tell('a) ) ; tell( 'c ) || call('f1) ; 'b >, 'call, ( 'q:Qid <- upTerm('f1) ) ) . *** proposital error


*** metaRed
*** tell
red metaRed( < def( 'd1, tell('a) ) ; tell( 'c ) || tell('b )  ; 'a > ) .
red metaRed( < def( 'd1, tell('a) ) ; tell( 'c ) || tell('b ) || tell('c)  ; 'a > ) . 

*** askthen
red metaRed( < def( 'd1, tell('a) ) ; ( ask 'a then (tell('b)) ) || tell('d) ; 'a > ) . 
red metaRed( < def( 'd1, tell('a) ) ; tell('d) || ( ask 'a then (tell('b)) ) ; 'a > ) .
red metaRed( < def( 'd1, tell('a) ) ; tell('d) || ( ask 'a then (tell('b) || tell('c)) ) ; 'a > ) . 
red metaRed( < def( 'd1, tell('a) ) ; tell('d) || ( ask 'a then (tell('b)) ) || tell('f) ; 'a > ) . 

*** sum
red metaRed( < def( 'd1, tell('a) ) ; tell('d) || ( ask 'c then tell('e) + ask 'd then tell('f) ) || tell('g) ; 'c > ) . 

*** call
red metaRed( < def( 'd1, tell('a) ) ; call('d2) || tell('g) ; 'c > ) .
red metaRed( < def( 'd1, tell('a) ) ; ( call('d2)  || tell('g))  || (call('d2) || tell('b')) ; 'c > ) .


Ao tirar a comutatividade, os seguintes exemplos pararam de funcionar:
red metaApp( < def( 'd1, tell('a) ) ;  ask 'd then tell('e) + ask 'c then tell('f) ; 'c >, 'sum, ( 'c:Constraint <- upTerm('d) ; 'P:Process <- upTerm(tell('f)) ) ) .
red metaApp( < def( 'd1, tell('a) ) ;  lask 'd then tell('e) + lask 'c then tell('f) ; 'c >, 'lsum, ( 'c:Constraint <- upTerm('d) ; 'P:Process <- upTerm(tell('f)) ) ) .


red metaSearch(upModule('META-CONFIG, false), upTerm( < def( 'd1, tell('a) ) ; ( (ask 'a then tell('x)) + (ask 'a then tell('y)) )  || call('d1) ; 'b > ), 'C:Config, nil, '!, unbounded, 0) .

red metaMatch(upModule('META-CONFIG, false), upTerm( < def( 'd1, tell('a) ) ; tell('a) || tell('b) ; 'c > ),  



'C:Config, nil, '!, unbounded, 0) .